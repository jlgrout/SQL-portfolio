--Dataset: Apple Store Data Set (From Lore So What) 
--Source: https://drive.google.com/drive/folders/14O9xB8N1gXN_67ouphImQkvpzyitmTfR
--Queried using: SQL OnLine IDE

CREATE TABLE appleStore_description_combined AS 

SELECT * FROM appleStore_description1

UNION ALL

SELECT * FROM appleStore_description2

UNION ALL

SELECT * FROM appleStore_description3

UNION ALL

SELECT * FROM appleStore_description4

**EXPLORATORY DATA ANALYSIS**

--Checking the number of unique apps in both AppleStore tablesAppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIds
FROM AppleStore

SELECT COUNT(DISTINCT id) AS UniqueAppIds
FROM appleStore_description_combined

--Both have 7197, meaning that there are no missing ids 

--Checking for any missing values in key fields

SELECT COUNT (*) AS MissingValues
FROM AppleStore
WHERE track_name is null OR user_rating is null 

SELECT COUNT (*) AS MissingValues
FROM appleStore_description_combined
WHERE app_desc is null 

--Neither have missing values

--Finding out the number of apps per genre 

SELECT prime_genre, Count(*) AS NumApps
FROM AppleStore
GROUP BY prime_genre
ORDER BY NumApps DESC 

--Getting an overview of the apps' ratings

SELECT MIN(user_rating) AS MinRating,
	     MAX(user_rating) AS MaxRating,
       AVG(user_rating) as AvgRating
From AppleStore     

**DATA ANALYSIS**

--Finding out if paid apps have higher ratings than free apps

SELECT CASE 
		WHEN price > 0 THEN 'Paid'
        ELSE 'Free'
   END AS App_Type,
   AVG(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY App_Type

--Finding out if apps with more supported languages have higher ratings

SELECT CASE 
		WHEN lang_num < 10 THEN '<10 languages'
        WHEN lang_num between 10 AND 30 THEN '10-30 languages'
        ELSE '>30 languages'
   END AS language_bucket,
   AVG(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY language_bucket
ORDER BY Avg_Rating DESC

--Looking at genres with low ratings

SELECT prime_genre,
	   AVG(user_rating) AS Avg_Rating
FROM AppleStore
GROUP BY prime_genre
ORDER BY Avg_Rating ASC 
LIMIT 10

--Finding out if there is correlation between the length of app description and user rating

SELECT CASE
	WHEN LENGTH(b.app_desc) <500 THEN 'Short'
    WHEN LENGTH(b.app_desc) BETWEEN 500 AND 1000 THEN 'Medium'
    ELSE 'Long' 
 END AS description_length_bucket,
 AVG(a.user_rating) AS average_rating

FROM 
	AppleStore As a
JOIN 
	appleStore_description_combined AS b
ON 
	a.id - b.id

GROUP BY description_length_bucket
ORDER BY average_rating desc 

--Looking at the highest rated apps for each genreAppleStore

SELECT 
	prime_genre,
    track_name,
    user_rating
FROM ( 
  	  SELECT
	  prime_genre,
      track_name,
      user_rating,
      RANK() OVER(PARTITION BY prime_genre order by user_rating desc, rating_count_tot DESC) AS rank
      FROM AppleStore
     ) AS a
WHERE
a.rank = 1
